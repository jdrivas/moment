# require 'webmock/rspec'
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.

# VCR allows for the Record and play back network interactions.
# GITHUB: https://github.com/vcr/vcr
# DOCS: https://relishapp.com/vcr/vcr/docs
require 'vcr'
VCR.configure do |c|
  # This is from wherever you run rspec.
  c.cassette_library_dir = "spec/fixtures/vcr_cassettes"
  # Does what it says on the tin, if you want to get an exception
  # when you try to go to the web and VCR wasn't tagged, 
  # comment out the line (it's the default) or set it to false.
  # Set this way, you can make web connections as you like.
  c.allow_http_connections_when_no_cassette = true
  # Many choices, but this seems to be preffered for it's completeness.
  c.hook_into :webmock
  # this lets you use the :vcr condition on the spec line: (i.e. it "expects something ", :vcr do)
  c.configure_rspec_metadata!
end
class WebMock::StubSocket; attr_accessor :read_timeout end
class WebMock::StubSocket; attr_accessor :continue_timeout end


#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

# In memory filesystem used instead of real file system for
# specs or describes tagged with :fakefs
require 'fakefs/spec_helpers'
RSpec.configure do |config|
  config.include FakeFS::SpecHelpers, fakefs: true
end