#!/usr/bin/env ruby
require 'gli'
require 'highline/import'

require 'moment'

begin # XXX: Remove this begin/rescue before distributing your app
require 'moment'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/moment` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/moment now"
  exit 64
end

include GLI::App

program_desc 'Manage a static website hosted on Amazon AWS S3.'

version Moment::VERSION

desc "Noisly describe what's going on."
switch [:v, :verbose]

desc "Manage AWS credentials."
long_desc  """
AWS credentials are stored in the YAML file #{Pathname.new(Moment::Keys.install_filename).expand_path}.
AWS credentials consist of two keys: the AWS access_key_id, and the AWS secret_key.\n
set - invokes a dialog for obtaining both credentials and then stores them.\n
show - displays the credentials found in the file.
"""
arg_name "set|show"
command :credentials do |c|
  c.action do |gobal_options, options, args|
    # Process credential commands
    case args[0]
    when "set"
      puts "Your keys will be stored in the file: #{Pathname.new(Moment::Keys.install_filename).expand_pa}"
      puts "You should put this file name in your .gitignore as well."
      puts "DON'T STORE AWS CREDENTIALS IN YOUR GIT OR OTHER REPOSITORY."
      access_key_id = ask("AWS access key id: ")
      secret_key = ask("AWS secret key: ")
      overwrite_keys = File.exist?(Moment::Keys.install_filename) && 
                       agree("#{Moment::Keys.install_filename} exists. Overwrite? ")
      Moment::Keys.new(access_key_id, secret_key).install if overwrite_keys || !File.exist?(Moment::Keys.install_filename)
    when "show"
      keys = Moment::Keys.installed
      if keys.nil?
        puts "Couldn't find installed credentials"
      else
        puts "Found credentials in file #{Pathname.new(Moment::Keys.install_filename).expand_path}"
        puts "AWS ACCESS KEY ID: \"#{keys.access_key_id}\""
        puts "AWS SECRET KEY: \"#{keys.secret_key}\""
      end
    else
      raise "invalid credentials command: #{args[0]}"
    end
  end  
end

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]
desc 'Mange files that make up the site.'
arg_name "list"
command :files do |c|
  c.desc "directory to use to use for files"
  c.flag :d, :directory
  c.action do |global_options, options, args|
    puts "options: #{options}"
    puts "files command run"
    case args[0]
    when "list"
      puts Moment::Files.get_file_list options[:directory]
    else 
      raise "invalid files command: #{args[0]}"
    end
  end
end

desc 'Manage the AWS S3 site configuration'
command :site do |c|
  c.action do |global_options, options, args|
    puts "site command run"
  end
end

desc 'Deploy the static site to an evironment. An environment can be one of "production" or "staging"'
arg_name '<environment>'
command :deploy do |c|
  c.desc 'Deploy from the local directory as opposed to the default git repo.'
  c.switch :l

  # c.desc 'Describe a flag to deploy'
  # c.default_value 'default'
  # c.flag :f
  c.action do |global_options,options,args|
    puts "calling deploy with: "
    puts "\targs: #{args}"

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "deploy command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
